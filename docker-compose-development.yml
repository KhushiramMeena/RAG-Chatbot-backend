services:
  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: rag-chatbot-redis
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - rag-network

  # Qdrant vector database
  qdrant:
    image: qdrant/qdrant:latest
    container_name: rag-chatbot-qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - rag-network

  # MySQL database (optional)
  mysql:
    image: mysql:8.0
    container_name: rag-chatbot-mysql
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: news_chatbot
      MYSQL_USER: chatbot_user
      MYSQL_PASSWORD: chatbot_password
    volumes:
      - mysql_data:/var/lib/mysql
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - rag-network

  # Backend API server
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: rag-chatbot-backend
    ports:
      - "5001:5000"
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - PORT=${PORT:-5000}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - QDRANT_URL=${QDRANT_URL:-http://qdrant:6333}
      - QDRANT_API_KEY=${QDRANT_API_KEY}
      - DB_HOST=${DB_HOST:-mysql}
      - DB_PORT=${DB_PORT:-3306}
      - DB_USER=${DB_USER:-chatbot_user}
      - DB_PASSWORD=${DB_PASSWORD:-chatbot_password}
      - DB_NAME=${DB_NAME:-news_chatbot}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - JINA_API_KEY=${JINA_API_KEY}
      - NEWS_RSS_FEEDS=${NEWS_RSS_FEEDS}
      - SESSION_TTL=${SESSION_TTL:-3600}
      - CACHE_TTL=${CACHE_TTL:-1800}
      - FRONTEND_URL=${FRONTEND_URL:-http://localhost:3000}
    depends_on:
      redis:
        condition: service_healthy
      mysql:
        condition: service_healthy
    # volumes:
    #   - ./backend/logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - rag-network

  # Frontend React app
  frontend:
    build:
      context: ../voosh-frontend
      dockerfile: Dockerfile
      args:
        REACT_APP_API_URL: ${REACT_APP_API_URL:-http://localhost:5001/api}
        REACT_APP_SOCKET_URL: ${REACT_APP_SOCKET_URL:-http://localhost:5001}
        REACT_APP_APP_NAME: ${REACT_APP_APP_NAME:-News Chatbot}
        REACT_APP_ENVIRONMENT: ${REACT_APP_ENVIRONMENT:-production}
    container_name: rag-chatbot-frontend
    ports:
      - "3000:80"
    environment:
      - REACT_APP_API_URL=${REACT_APP_API_URL:-http://localhost:5001/api}
      - REACT_APP_SOCKET_URL=${REACT_APP_SOCKET_URL:-http://localhost:5001}
      - REACT_APP_ENVIRONMENT=${REACT_APP_ENVIRONMENT:-production}
      - REACT_APP_APP_NAME=${REACT_APP_APP_NAME:-News Chatbot}
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - rag-network

volumes:
  redis_data:
    driver: local
  qdrant_data:
    driver: local
  mysql_data:
    driver: local

networks:
  rag-network:
    driver: bridge
